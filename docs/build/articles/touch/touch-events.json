{"content":"<h1>Touch Events</h1>\n\n<p>SproutCore's touch events have a few great features:</p>\n\n<ul>\n<li>Multiple views can receive touches simultaneously.</li>\n<li>A single view can receive multiple touches.</li>\n<li>A view can capture touches before allowing them to pass through to children.</li>\n<li>Child views can release touches back to parent views that originally captured them.</li>\n</ul>\n\n<p>We won't get into the last two in this article&emdash;they're quite sophisticated!</p>\n\n<h1>Simple Single-Touch Handling</h1>\n\n<p>You may be familiar with this SC.View method signature if you are familiar with SproutCore:</p>\n\n<pre><code class='syntax js'><span class=\"variable\">mouseDown</span>: <span class=\"keyword\">function</span>(<span class=\"variable\">evt</span>)\n</code></pre>\n\n<p>With <code class='syntax js'><span class=\"variable\">mouseDown</span></code>, you can decide whether or not to accept the mouse event by returning either\n<code class='syntax js'><span class=\"class\">YES</span></code> or <code class='syntax js'><span class=\"class\">NO</span></code>.</p>\n\n<p>Touch events are similar, but work a bit differently:</p>\n\n<pre><code class='syntax js'><span class=\"variable\">touchStart</span>: <span class=\"keyword\">function</span>(<span class=\"variable\">touch</span>)\n</code></pre>\n\n<p>Instead of being passed a raw event, <code class='syntax js'><span class=\"variable\">touchStart</span></code> is passed an <code class='syntax js'><span class=\"class\">SC</span>.<span class=\"class\">Touch</span></code> object.\nIf you return YES from touchStart, your view will \"own\" the touch\u2014in SproutCore terms, your\nview will be the <em>touch responder</em>. For more information about what this entails, see\nthe \"Internals\" article. Your view will own the touch until the touch ends.</p>\n\n<p><code class='syntax js'><span class=\"variable\">touchStart</span></code> will be called once for every touch that touches the view.</p>\n\n<p><strong>Note:</strong> By default, views only receive <code class='syntax js'><span class=\"variable\">touchStart</span></code> and touchEnd for a single touch. This is\na feature intended to make it easier to handle such cases, very similar to Cocoa Touch's <code class='syntax js'><span class=\"variable\">acceptsMultitouch</span></code>\nproperty\u2014actually, SC.View uses the same property name! See the \"Multitouch\" article.</p>\n\n<h2>Anatomy of an SC.Touch</h2>\n\n<p>SC.Touch represents the touch from the time the user puts their finger on the screen until the time they lift it.</p>\n\n<p>The touch object acts like an event object in many ways. It has many other useful things, as well:</p>\n\n<ul>\n<li><code class='syntax js'><span class=\"variable\">pageX</span></code> and <code class='syntax js'><span class=\"variable\">pageY</span></code> for the touch</li>\n<li><code class='syntax js'><span class=\"variable\">event</span></code>: if in an event cycle, this contains the event. Otherwise, it is <code class='syntax js'><span class=\"variable\">undefined</span></code>. \nYou will probably never need to access this.</li>\n<li><code class='syntax js'><span class=\"variable\">preventDefault</span></code>: if the touch is connected with an event, this calls <code class='syntax js'><span class=\"variable\">preventDefault</span>()</code> on the event.</li>\n<li><code class='syntax js'><span class=\"variable\">touchesForView</span>(<span class=\"variable\">view</span>)</code>: when supplied a view, will find all touches that the view is the\ntouch responder for. It is a CoreSet; to get an array, call <code class='syntax js'>.<span class=\"variable\">toArray</span></code> on the result.</li>\n<li><code class='syntax js'><span class=\"variable\">averagedTouchesForView</span>(<span class=\"variable\">view</span>)</code>: When supplied a view, averages all the touches on that view,\nreturning both an average position and an average distance from that position.</li>\n</ul>\n\n<p><strong>Note:</strong> If you call <code class='syntax js'><span class=\"variable\">touchesForView</span>(<span class=\"this\">this</span>)</code> from <code class='syntax js'><span class=\"variable\">touchStart</span></code>, the touch supplied will not be in the set\nreturned by <code class='syntax js'><span class=\"variable\">touchesForView</span>(<span class=\"this\">this</span>)</code>: you don't own the touch until you return YES.</p>\n\n<h2>touchEnd</h2>\n\n<p>Knowing when the touch starts is not very useful. At the very least, you will likely want to know when the touch\nends as well.</p>\n\n<p>It is quite simple:</p>\n\n<pre><code class='syntax js'><span class=\"variable\">touchEnd</span>: <span class=\"keyword\">function</span>(<span class=\"variable\">touch</span>)\n</code></pre>\n\n<p>It works exactly like <code class='syntax js'><span class=\"variable\">touchStart</span></code>. The touch will no longer be in the set of touches for the view,\nso if you call <code class='syntax js'><span class=\"variable\">touch</span>.<span class=\"variable\">touchesForView</span>(<span class=\"this\">this</span>)</code>, you'll only receive any other active touches. If your\nview does not accept multitouch, then the set is guaranteed to have no touches in it\u2014you only receive\n<code class='syntax js'><span class=\"variable\">touchEnd</span></code> for the last touch that ends.</p>\n\n<h2>Tracking Touches</h2>\n\n<p>Tracking touch movement is simple:</p>\n\n<pre><code class='syntax js'><span class=\"variable\">touchesDragged</span>: <span class=\"keyword\">function</span>(<span class=\"variable\">evt</span>, <span class=\"variable\">touches</span>)\n</code></pre>\n\n<p>The <code class='syntax js'><span class=\"variable\">touches</span></code> argument is the set of touches on the view\u2014the same set you get by calling <code class='syntax js'><span class=\"variable\">touchesForView</span>(<span class=\"this\">this</span>)</code>.\nThis will have <em>all</em> touches, regardless of whether or not your view accepts multitouch.</p>\n\n<p>If your view does <em>not</em> accept multitouch, then it is even simpler:</p>\n\n<pre><code class='syntax js'><span class=\"variable\">x</span> = <span class=\"variable\">evt</span>.<span class=\"variable\">pageX</span>;\n<span class=\"variable\">y</span> = <span class=\"variable\">evt</span>.<span class=\"variable\">pageY</span>;\n</code></pre>\n\n<h2>Tip: Cross-Platform-iness</h2>\n\n<p>Did you realize that, assuming you don't use the set of view touches or other touch-specific API,\nyou can do this:</p>\n\n<pre><code class='syntax js'><span class=\"variable\">mouseDown</span>: <span class=\"keyword\">function</span>(<span class=\"variable\">evt</span>) {\n  <span class=\"this\">this</span>.<span class=\"variable\">touchStart</span>(<span class=\"variable\">evt</span>);\n},\n\n<span class=\"variable\">mouseDragged</span>: <span class=\"keyword\">function</span>(<span class=\"variable\">evt</span>) {\n  <span class=\"this\">this</span>.<span class=\"variable\">touchesDragged</span>(<span class=\"variable\">evt</span>);\n},\n\n<span class=\"variable\">mouseUp</span>: <span class=\"keyword\">function</span>(<span class=\"variable\">evt</span>) {\n  <span class=\"this\">this</span>.<span class=\"variable\">touchEnd</span>(<span class=\"variable\">evt</span>);\n}\n</code></pre>\n\n<p>Of course, you can also redirect touch events to mouse events, but that is not as fun.</p>\n\n<h2>Putting it All Together</h2>\n\n<p>Here is a very simple demo that uses the methods described above to allow the user to move two views\naround the screen:</p>\n\n<p><a href='touch-demo.js' class='demo'>touch-demo.js</a></p>","errors":[],"demos":{"touch-demo.js":{"ex":"var Dot = SC.View.extend({\n  touchStart: function(touch) {\n    var f = this.get(\"frame\");\n    this._touch = {\n      start: { x: touch.pageX, y: touch.pageY },\n      ourStart: { x: f.x, y: f.y, width: f.width, height: f.height }\n    };\n    return YES; // or we won't get touchesDragged\n  },\n  \n  touchesDragged: function(evt, touches) {\n    var t = this._touch;\n    this.set(\"layout\", { \n      left: t.ourStart.x + evt.pageX - t.start.x,\n      top: t.ourStart.y + evt.pageY - t.start.y,\n      width: t.ourStart.width,\n      height: t.ourStart.height\n    });\n  },\n  \n  touchEnd: function() {\n    // actually, we don't need to do anything here...\n  },\n  \n  // and now, redirect mouse events :)\n  mouseDown: function(evt) {\n    this.touchStart(evt);\n  },\n  \n  mouseDragged: function(evt) {\n    this.touchesDragged(evt);\n  },\n  \n  mouseUp: function(evt) {\n    this.touchEnd(evt);\n  }\n});\nvar MyExampleView = SC.View.extend({\n  backgroundColor: \"white\",\n  childViews: \"dot1 dot2\".w(),\n  dot1: Dot.design({\n    backgroundColor: \"red\",\n    layout: { left: 10, top: 10, width: 100, height: 100 }\n  }),\n  dot2: Dot.design({\n    backgroundColor: \"blue\",\n    layout: { right: 10, bottom: 10, width: 100, height: 100 }\n  })\n});\n\n// bootstrap code :)\nexports.getDemoView = function() {\n  return MyExampleView;\n};\n","highlighted":"<span class=\"keyword\">var</span> <span class=\"class\">Dot</span> = <span class=\"class\">SC</span>.<span class=\"class\">View</span>.<span class=\"variable\">extend</span>({\n  <span class=\"variable\">touchStart</span>: <span class=\"keyword\">function</span>(<span class=\"variable\">touch</span>) {\n    <span class=\"keyword\">var</span> <span class=\"variable\">f</span> = <span class=\"this\">this</span>.<span class=\"variable\">get</span>(<span class=\"string\">&quot;frame&quot;</span>);\n    <span class=\"this\">this</span>.<span class=\"variable\">_touch</span> = {\n      <span class=\"variable\">start</span>: { <span class=\"variable\">x</span>: <span class=\"variable\">touch</span>.<span class=\"variable\">pageX</span>, <span class=\"variable\">y</span>: <span class=\"variable\">touch</span>.<span class=\"variable\">pageY</span> },\n      <span class=\"variable\">ourStart</span>: { <span class=\"variable\">x</span>: <span class=\"variable\">f</span>.<span class=\"variable\">x</span>, <span class=\"variable\">y</span>: <span class=\"variable\">f</span>.<span class=\"variable\">y</span>, <span class=\"variable\">width</span>: <span class=\"variable\">f</span>.<span class=\"variable\">width</span>, <span class=\"variable\">height</span>: <span class=\"variable\">f</span>.<span class=\"variable\">height</span> }\n    };\n    <span class=\"keyword\">return</span> <span class=\"class\">YES</span>; <span class=\"comment\">// or we won't get touchesDragged</span>\n  },\n  \n  <span class=\"variable\">touchesDragged</span>: <span class=\"keyword\">function</span>(<span class=\"variable\">evt</span>, <span class=\"variable\">touches</span>) {\n    <span class=\"keyword\">var</span> <span class=\"variable\">t</span> = <span class=\"this\">this</span>.<span class=\"variable\">_touch</span>;\n    <span class=\"this\">this</span>.<span class=\"variable\">set</span>(<span class=\"string\">&quot;layout&quot;</span>, { \n      <span class=\"variable\">left</span>: <span class=\"variable\">t</span>.<span class=\"variable\">ourStart</span>.<span class=\"variable\">x</span> + <span class=\"variable\">evt</span>.<span class=\"variable\">pageX</span> - <span class=\"variable\">t</span>.<span class=\"variable\">start</span>.<span class=\"variable\">x</span>,\n      <span class=\"variable\">top</span>: <span class=\"variable\">t</span>.<span class=\"variable\">ourStart</span>.<span class=\"variable\">y</span> + <span class=\"variable\">evt</span>.<span class=\"variable\">pageY</span> - <span class=\"variable\">t</span>.<span class=\"variable\">start</span>.<span class=\"variable\">y</span>,\n      <span class=\"variable\">width</span>: <span class=\"variable\">t</span>.<span class=\"variable\">ourStart</span>.<span class=\"variable\">width</span>,\n      <span class=\"variable\">height</span>: <span class=\"variable\">t</span>.<span class=\"variable\">ourStart</span>.<span class=\"variable\">height</span>\n    });\n  },\n  \n  <span class=\"variable\">touchEnd</span>: <span class=\"keyword\">function</span>() {\n    <span class=\"comment\">// actually, we don't need to do anything here...</span>\n  },\n  \n  <span class=\"comment\">// and now, redirect mouse events :)</span>\n  <span class=\"variable\">mouseDown</span>: <span class=\"keyword\">function</span>(<span class=\"variable\">evt</span>) {\n    <span class=\"this\">this</span>.<span class=\"variable\">touchStart</span>(<span class=\"variable\">evt</span>);\n  },\n  \n  <span class=\"variable\">mouseDragged</span>: <span class=\"keyword\">function</span>(<span class=\"variable\">evt</span>) {\n    <span class=\"this\">this</span>.<span class=\"variable\">touchesDragged</span>(<span class=\"variable\">evt</span>);\n  },\n  \n  <span class=\"variable\">mouseUp</span>: <span class=\"keyword\">function</span>(<span class=\"variable\">evt</span>) {\n    <span class=\"this\">this</span>.<span class=\"variable\">touchEnd</span>(<span class=\"variable\">evt</span>);\n  }\n});\n<span class=\"keyword\">var</span> <span class=\"class\">MyExampleView</span> = <span class=\"class\">SC</span>.<span class=\"class\">View</span>.<span class=\"variable\">extend</span>({\n  <span class=\"variable\">backgroundColor</span>: <span class=\"string\">&quot;white&quot;</span>,\n  <span class=\"variable\">childViews</span>: <span class=\"string\">&quot;dot1 dot2&quot;</span>.<span class=\"variable\">w</span>(),\n  <span class=\"variable\">dot1</span>: <span class=\"class\">Dot</span>.<span class=\"variable\">design</span>({\n    <span class=\"variable\">backgroundColor</span>: <span class=\"string\">&quot;red&quot;</span>,\n    <span class=\"variable\">layout</span>: { <span class=\"variable\">left</span>: <span class=\"number integer\">10</span>, <span class=\"variable\">top</span>: <span class=\"number integer\">10</span>, <span class=\"variable\">width</span>: <span class=\"number integer\">100</span>, <span class=\"variable\">height</span>: <span class=\"number integer\">100</span> }\n  }),\n  <span class=\"variable\">dot2</span>: <span class=\"class\">Dot</span>.<span class=\"variable\">design</span>({\n    <span class=\"variable\">backgroundColor</span>: <span class=\"string\">&quot;blue&quot;</span>,\n    <span class=\"variable\">layout</span>: { <span class=\"variable\">right</span>: <span class=\"number integer\">10</span>, <span class=\"variable\">bottom</span>: <span class=\"number integer\">10</span>, <span class=\"variable\">width</span>: <span class=\"number integer\">100</span>, <span class=\"variable\">height</span>: <span class=\"number integer\">100</span> }\n  })\n});\n\n<span class=\"comment\">// bootstrap code :)</span>\n<span class=\"variable\">exports</span>.<span class=\"variable\">getDemoView</span> = <span class=\"keyword\">function</span>() {\n  <span class=\"keyword\">return</span> <span class=\"class\">MyExampleView</span>;\n};\n","original":"var Dot = SC.View.extend({\n  touchStart: function(touch) {\n    var f = this.get(\"frame\");\n    this._touch = {\n      start: { x: touch.pageX, y: touch.pageY },\n      ourStart: { x: f.x, y: f.y, width: f.width, height: f.height }\n    };\n    return YES; // or we won't get touchesDragged\n  },\n  \n  touchesDragged: function(evt, touches) {\n    var t = this._touch;\n    this.set(\"layout\", { \n      left: t.ourStart.x + evt.pageX - t.start.x,\n      top: t.ourStart.y + evt.pageY - t.start.y,\n      width: t.ourStart.width,\n      height: t.ourStart.height\n    });\n  },\n  \n  touchEnd: function() {\n    // actually, we don't need to do anything here...\n  },\n  \n  // and now, redirect mouse events :)\n  mouseDown: function(evt) {\n    this.touchStart(evt);\n  },\n  \n  mouseDragged: function(evt) {\n    this.touchesDragged(evt);\n  },\n  \n  mouseUp: function(evt) {\n    this.touchEnd(evt);\n  }\n});\nvar MyExampleView = SC.View.extend({\n  backgroundColor: \"white\",\n  childViews: \"dot1 dot2\".w(),\n  dot1: Dot.design({\n    backgroundColor: \"red\",\n    layout: { left: 10, top: 10, width: 100, height: 100 }\n  }),\n  dot2: Dot.design({\n    backgroundColor: \"blue\",\n    layout: { right: 10, bottom: 10, width: 100, height: 100 }\n  })\n});\n\n// bootstrap code :)\nexports.getDemoView = function() {\n  return MyExampleView;\n};\n"}},"articleDirectory":"articles/touch/","outputDirectory":"build/","title":"Touch Events"}