{"content":"<h1>Releasing</h1>\n\n<p>Why would you want to give up a touch? Imagine that your control is inside a <code class='syntax js'><span class=\"class\">SC</span>.<span class=\"class\">ScrollView</span></code>:\nif the touch moves too much, perhaps it should be considered a scroll, rather than an\naction for your control.</p>\n\n<p>From touchesDragged, you would give up touch responder status through a line like this:</p>\n\n<pre><code class='syntax js'><span class=\"variable\">someTouch</span>.<span class=\"variable\">makeTouchResponder</span>(<span class=\"variable\">someTouch</span>.<span class=\"variable\">nextTouchResponder</span>);\n</code></pre>\n\n<p>The touch's nextTouchResponder is the responder that is the <em>parent</em> touch responder; through\ndevious trickery (see <em>Capturing Touches</em>), ScrollView receives touch responder status <em>before</em>\nother views; further, it doesn't just hand touch responder status to the target view (your view)--\nit adds the responder to a stack of touch responders for the touch, so the responders can easily\nreturn to their parent responder (which is what you do with the above line of code.)</p>\n\n<p>Remember, though, that touchesDragged is called with a set of touches. It is really easy\nto change the responder for all of the touches simultaneously, should you wish to do so:</p>\n\n<pre><code class='syntax js'><span class=\"variable\">touches</span>.<span class=\"variable\">forEach</span>(<span class=\"keyword\">function</span>(<span class=\"variable\">touch</span>){\n  <span class=\"variable\">touch</span>.<span class=\"variable\">makeTouchResponder</span>(<span class=\"variable\">touch</span>.<span class=\"variable\">nextTouchResponder</span>);\n});\n</code></pre>\n\n<p>Perhaps you want to pass control only if the responder is scrollable:</p>\n\n<pre><code class='syntax js'><span class=\"keyword\">if</span> (<span class=\"variable\">touch</span>.<span class=\"variable\">nextTouchResponder</span> &amp;&amp; <span class=\"variable\">touch</span>.<span class=\"variable\">nextTouchResponder</span>.<span class=\"variable\">isScrollable</span>) {\n    <span class=\"variable\">touch</span>.<span class=\"variable\">makeTouchResponder</span>(<span class=\"variable\">touch</span>.<span class=\"variable\">nextTouchResponder</span>);\n}\n</code></pre>\n\n<p><code class='syntax js'><span class=\"variable\">touchCancelled</span></code> will be called on your view automatically.</p>\n\n<h2>What Does It Look Like?</h2>\n\n<p>In this example, there is a single white box, containing a gray inner box. When you press\non the inner box, the outer box will capture the touch first. After a delay, it re-captures\nby calling captureTouch, and the inner view receives it. This is just like the \"Capturing\" demo.</p>\n\n<p>However, the inner view, after a second, will release it back.</p>\n\n<p><a href='releasing.js' class='demo'>releasing.js</a></p>","errors":[],"demos":{"releasing.js":{"ex":"/**\n  This is similar to the \"Capturing\" example.\n  \n  In fact, the outer view is identical. Only the inner view has changed.\n  As we can't pass control back without stacking, this demo _only_ includes\n  the stacking method.\n  \n  The inner view, just like the outer view, passes control back after a specific\n  time period.\n*/\nvar Tester = SC.View.extend({\n  backgroundColor: \"white\",\n  \n  captureTouch: function() {\n    return YES;\n  },\n  \n  touchStart: function(touch) {\n    this._hasTouch = touch;\n    this.get(\"layer\").style.backgroundColor = \"red\";\n    \n    // in one second, we'll pass the touch along.\n    this.invokeLater(\"beginContentTouches\", 1000, touch);\n    return YES;\n  },\n  \n  beginContentTouches: function(touch) {\n    // if our touch hasn't changed in the meantime\n    if (touch === this._hasTouch) {\n      // we'll pass the touch along.\n      touch.captureTouch(this, YES);\n    }\n  },\n  \n  touchEnd: function(touch) {\n    this._hasTouch = NO;\n    this.get(\"layer\").style.backgroundColor = \"white\";\n  },\n  \n  touchCancelled: function(touch) {\n    this._hasTouch = NO;\n    this.get(\"layer\").style.backgroundColor = \"white\";\n  },\n  \n  childViews: \"inner\".w(),\n  inner: SC.View.design({\n    layout: { left: 50, top: 50, right: 50, bottom: 50 },\n    backgroundColor: \"gray\",\n    touchStart: function(touch) {\n      this._touch = touch;\n      this.get(\"layer\").style.backgroundColor = \"blue\";\n      this.invokeLater(\"releaseTouch\", 1000, touch);\n      return YES;\n    },\n    \n    releaseTouch: function(touch) {\n      if (touch === this._touch) {\n        touch.makeTouchResponder(touch.nextTouchResponder);\n      }\n    },\n    \n    touchEnd: function(touch) {\n      this._touch = NO;\n      this.get(\"layer\").style.backgroundColor = \"gray\";\n    },\n    \n    touchCancelled: function(touch) {\n      this._touch = NO;\n      this.get(\"layer\").style.backgroundColor = \"gray\";\n    }\n    \n  })\n  \n});\n\nvar MyExampleView = SC.View.extend({\n  backgroundColor: \"#aaa\",\n  childViews: \"demo\".w(),\n  demo: Tester.extend({\n    layout: { top: 10, left: 10, width: 200, height: 200 },\n    shouldStack: YES\n  })\n});\n\n// bootstrap code :)\nexports.getDemoView = function() {\n  return MyExampleView;\n};\n","highlighted":"<span class=\"multiline comment\">/**\n  This is similar to the &quot;Capturing&quot; example.\n  \n  In fact, the outer view is identical. Only the inner view has changed.\n  As we can't pass control back without stacking, this demo _only_ includes\n  the stacking method.\n  \n  The inner view, just like the outer view, passes control back after a specific\n  time period.\n*/</span>\n<span class=\"keyword\">var</span> <span class=\"class\">Tester</span> = <span class=\"class\">SC</span>.<span class=\"class\">View</span>.<span class=\"variable\">extend</span>({\n  <span class=\"variable\">backgroundColor</span>: <span class=\"string\">&quot;white&quot;</span>,\n  \n  <span class=\"variable\">captureTouch</span>: <span class=\"keyword\">function</span>() {\n    <span class=\"keyword\">return</span> <span class=\"class\">YES</span>;\n  },\n  \n  <span class=\"variable\">touchStart</span>: <span class=\"keyword\">function</span>(<span class=\"variable\">touch</span>) {\n    <span class=\"this\">this</span>.<span class=\"variable\">_hasTouch</span> = <span class=\"variable\">touch</span>;\n    <span class=\"this\">this</span>.<span class=\"variable\">get</span>(<span class=\"string\">&quot;layer&quot;</span>).<span class=\"variable\">style</span>.<span class=\"variable\">backgroundColor</span> = <span class=\"string\">&quot;red&quot;</span>;\n    \n    <span class=\"comment\">// in one second, we'll pass the touch along.</span>\n    <span class=\"this\">this</span>.<span class=\"variable\">invokeLater</span>(<span class=\"string\">&quot;beginContentTouches&quot;</span>, <span class=\"number integer\">1000</span>, <span class=\"variable\">touch</span>);\n    <span class=\"keyword\">return</span> <span class=\"class\">YES</span>;\n  },\n  \n  <span class=\"variable\">beginContentTouches</span>: <span class=\"keyword\">function</span>(<span class=\"variable\">touch</span>) {\n    <span class=\"comment\">// if our touch hasn't changed in the meantime</span>\n    <span class=\"keyword\">if</span> (<span class=\"variable\">touch</span> === <span class=\"this\">this</span>.<span class=\"variable\">_hasTouch</span>) {\n      <span class=\"comment\">// we'll pass the touch along.</span>\n      <span class=\"variable\">touch</span>.<span class=\"variable\">captureTouch</span>(<span class=\"this\">this</span>, <span class=\"class\">YES</span>);\n    }\n  },\n  \n  <span class=\"variable\">touchEnd</span>: <span class=\"keyword\">function</span>(<span class=\"variable\">touch</span>) {\n    <span class=\"this\">this</span>.<span class=\"variable\">_hasTouch</span> = <span class=\"class\">NO</span>;\n    <span class=\"this\">this</span>.<span class=\"variable\">get</span>(<span class=\"string\">&quot;layer&quot;</span>).<span class=\"variable\">style</span>.<span class=\"variable\">backgroundColor</span> = <span class=\"string\">&quot;white&quot;</span>;\n  },\n  \n  <span class=\"variable\">touchCancelled</span>: <span class=\"keyword\">function</span>(<span class=\"variable\">touch</span>) {\n    <span class=\"this\">this</span>.<span class=\"variable\">_hasTouch</span> = <span class=\"class\">NO</span>;\n    <span class=\"this\">this</span>.<span class=\"variable\">get</span>(<span class=\"string\">&quot;layer&quot;</span>).<span class=\"variable\">style</span>.<span class=\"variable\">backgroundColor</span> = <span class=\"string\">&quot;white&quot;</span>;\n  },\n  \n  <span class=\"variable\">childViews</span>: <span class=\"string\">&quot;inner&quot;</span>.<span class=\"variable\">w</span>(),\n  <span class=\"variable\">inner</span>: <span class=\"class\">SC</span>.<span class=\"class\">View</span>.<span class=\"variable\">design</span>({\n    <span class=\"variable\">layout</span>: { <span class=\"variable\">left</span>: <span class=\"number integer\">50</span>, <span class=\"variable\">top</span>: <span class=\"number integer\">50</span>, <span class=\"variable\">right</span>: <span class=\"number integer\">50</span>, <span class=\"variable\">bottom</span>: <span class=\"number integer\">50</span> },\n    <span class=\"variable\">backgroundColor</span>: <span class=\"string\">&quot;gray&quot;</span>,\n    <span class=\"variable\">touchStart</span>: <span class=\"keyword\">function</span>(<span class=\"variable\">touch</span>) {\n      <span class=\"this\">this</span>.<span class=\"variable\">_touch</span> = <span class=\"variable\">touch</span>;\n      <span class=\"this\">this</span>.<span class=\"variable\">get</span>(<span class=\"string\">&quot;layer&quot;</span>).<span class=\"variable\">style</span>.<span class=\"variable\">backgroundColor</span> = <span class=\"string\">&quot;blue&quot;</span>;\n      <span class=\"this\">this</span>.<span class=\"variable\">invokeLater</span>(<span class=\"string\">&quot;releaseTouch&quot;</span>, <span class=\"number integer\">1000</span>, <span class=\"variable\">touch</span>);\n      <span class=\"keyword\">return</span> <span class=\"class\">YES</span>;\n    },\n    \n    <span class=\"variable\">releaseTouch</span>: <span class=\"keyword\">function</span>(<span class=\"variable\">touch</span>) {\n      <span class=\"keyword\">if</span> (<span class=\"variable\">touch</span> === <span class=\"this\">this</span>.<span class=\"variable\">_touch</span>) {\n        <span class=\"variable\">touch</span>.<span class=\"variable\">makeTouchResponder</span>(<span class=\"variable\">touch</span>.<span class=\"variable\">nextTouchResponder</span>);\n      }\n    },\n    \n    <span class=\"variable\">touchEnd</span>: <span class=\"keyword\">function</span>(<span class=\"variable\">touch</span>) {\n      <span class=\"this\">this</span>.<span class=\"variable\">_touch</span> = <span class=\"class\">NO</span>;\n      <span class=\"this\">this</span>.<span class=\"variable\">get</span>(<span class=\"string\">&quot;layer&quot;</span>).<span class=\"variable\">style</span>.<span class=\"variable\">backgroundColor</span> = <span class=\"string\">&quot;gray&quot;</span>;\n    },\n    \n    <span class=\"variable\">touchCancelled</span>: <span class=\"keyword\">function</span>(<span class=\"variable\">touch</span>) {\n      <span class=\"this\">this</span>.<span class=\"variable\">_touch</span> = <span class=\"class\">NO</span>;\n      <span class=\"this\">this</span>.<span class=\"variable\">get</span>(<span class=\"string\">&quot;layer&quot;</span>).<span class=\"variable\">style</span>.<span class=\"variable\">backgroundColor</span> = <span class=\"string\">&quot;gray&quot;</span>;\n    }\n    \n  })\n  \n});\n\n<span class=\"keyword\">var</span> <span class=\"class\">MyExampleView</span> = <span class=\"class\">SC</span>.<span class=\"class\">View</span>.<span class=\"variable\">extend</span>({\n  <span class=\"variable\">backgroundColor</span>: <span class=\"string\">&quot;#aaa&quot;</span>,\n  <span class=\"variable\">childViews</span>: <span class=\"string\">&quot;demo&quot;</span>.<span class=\"variable\">w</span>(),\n  <span class=\"variable\">demo</span>: <span class=\"class\">Tester</span>.<span class=\"variable\">extend</span>({\n    <span class=\"variable\">layout</span>: { <span class=\"variable\">top</span>: <span class=\"number integer\">10</span>, <span class=\"variable\">left</span>: <span class=\"number integer\">10</span>, <span class=\"variable\">width</span>: <span class=\"number integer\">200</span>, <span class=\"variable\">height</span>: <span class=\"number integer\">200</span> },\n    <span class=\"variable\">shouldStack</span>: <span class=\"class\">YES</span>\n  })\n});\n\n<span class=\"comment\">// bootstrap code :)</span>\n<span class=\"variable\">exports</span>.<span class=\"variable\">getDemoView</span> = <span class=\"keyword\">function</span>() {\n  <span class=\"keyword\">return</span> <span class=\"class\">MyExampleView</span>;\n};\n","original":"/**\n  This is similar to the \"Capturing\" example.\n  \n  In fact, the outer view is identical. Only the inner view has changed.\n  As we can't pass control back without stacking, this demo _only_ includes\n  the stacking method.\n  \n  The inner view, just like the outer view, passes control back after a specific\n  time period.\n*/\nvar Tester = SC.View.extend({\n  backgroundColor: \"white\",\n  \n  captureTouch: function() {\n    return YES;\n  },\n  \n  touchStart: function(touch) {\n    this._hasTouch = touch;\n    this.get(\"layer\").style.backgroundColor = \"red\";\n    \n    // in one second, we'll pass the touch along.\n    this.invokeLater(\"beginContentTouches\", 1000, touch);\n    return YES;\n  },\n  \n  beginContentTouches: function(touch) {\n    // if our touch hasn't changed in the meantime\n    if (touch === this._hasTouch) {\n      // we'll pass the touch along.\n      touch.captureTouch(this, YES);\n    }\n  },\n  \n  touchEnd: function(touch) {\n    this._hasTouch = NO;\n    this.get(\"layer\").style.backgroundColor = \"white\";\n  },\n  \n  touchCancelled: function(touch) {\n    this._hasTouch = NO;\n    this.get(\"layer\").style.backgroundColor = \"white\";\n  },\n  \n  childViews: \"inner\".w(),\n  inner: SC.View.design({\n    layout: { left: 50, top: 50, right: 50, bottom: 50 },\n    backgroundColor: \"gray\",\n    touchStart: function(touch) {\n      this._touch = touch;\n      this.get(\"layer\").style.backgroundColor = \"blue\";\n      this.invokeLater(\"releaseTouch\", 1000, touch);\n      return YES;\n    },\n    \n    releaseTouch: function(touch) {\n      if (touch === this._touch) {\n        touch.makeTouchResponder(touch.nextTouchResponder);\n      }\n    },\n    \n    touchEnd: function(touch) {\n      this._touch = NO;\n      this.get(\"layer\").style.backgroundColor = \"gray\";\n    },\n    \n    touchCancelled: function(touch) {\n      this._touch = NO;\n      this.get(\"layer\").style.backgroundColor = \"gray\";\n    }\n    \n  })\n  \n});\n\nvar MyExampleView = SC.View.extend({\n  backgroundColor: \"#aaa\",\n  childViews: \"demo\".w(),\n  demo: Tester.extend({\n    layout: { top: 10, left: 10, width: 200, height: 200 },\n    shouldStack: YES\n  })\n});\n\n// bootstrap code :)\nexports.getDemoView = function() {\n  return MyExampleView;\n};\n"}},"articleDirectory":"articles/touch/","outputDirectory":"build/","title":"Releasing"}