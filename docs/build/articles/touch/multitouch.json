{"content":"<h1>Multitouch</h1>\n\n<p>Handling single touches is pretty easy&emdash;not that much different from handling\nmouse events. But what about multiple touches?</p>\n\n<h2>Accepting Multiple Touches</h2>\n\n<p>First, you have to tell your view that you do, indeed want to receive multiple\ntouches. By default, views only receive single touches. This is because is easier \nto think in a single-touch model, and most controls only need to track a single touch.</p>\n\n<p>To accept multiple touches, just set the view's <code class='syntax js'><span class=\"variable\">acceptsMultitouch</span></code> property to\n<code class='syntax js'><span class=\"class\">YES</span></code>.</p>\n\n<pre><code class='syntax js'><span class=\"variable\">view</span> = <span class=\"class\">SC</span>.<span class=\"class\">View</span>.<span class=\"variable\">extend</span>({\n  <span class=\"variable\">acceptsMultitouch</span>: <span class=\"class\">YES</span>\n});\n</code></pre>\n\n<h2>Processing the Individual Touches</h2>\n\n<p>Even without the supplied helper function, processing individual touches is relatively\nsimple:</p>\n\n<ul>\n<li>You get a separate <code class='syntax js'><span class=\"variable\">touchStart</span></code> for each individual touch.</li>\n<li>You get a separate <code class='syntax js'><span class=\"variable\">touchEnd</span></code> for each individual touch.</li>\n<li>You get one <code class='syntax js'><span class=\"variable\">touchesDragged</span></code> each event cycle for all of your touches put together.</li>\n</ul>\n\n<p>So, detecting individual touches starting and ending is simple. Detecting those touches\nmoving is not quite as simple, but still relatively easy.</p>\n\n<p>Remember how <code class='syntax js'><span class=\"variable\">touchesDragged</span></code> works:</p>\n\n<pre><code class='syntax js'><span class=\"variable\">touchesDragged</span>: <span class=\"keyword\">function</span>(<span class=\"variable\">evt</span>, <span class=\"variable\">touches</span>)\n</code></pre>\n\n<p><code class='syntax js'><span class=\"variable\">touches</span></code> is an SC.CoreSet of SC.Touch objects. What can you do with a CoreSet? \nYou can do a couple of things:</p>\n\n<ul>\n<li>Turn it into an array and do whatever.</li>\n<li>Call .forEach to iterate.</li>\n</ul>\n\n<p>But you don't have to use the touches set at all. The <code class='syntax js'><span class=\"variable\">evt</span></code> has some useful properties and methods,\ntoo:</p>\n\n<ul>\n<li>pageX/pageY: the position of the first touch.</li>\n<li>averagedTouchesForView: a method which returns the averaged touch position\nand the average distance of the touches from that position.</li>\n</ul>\n\n<p><code class='syntax js'><span class=\"class\">SC</span>.<span class=\"class\">ScrollView</span></code>, for instance, makes heavy use of <code class='syntax js'><span class=\"variable\">averagedTouchesForView</span></code>, and never\ndirectly touches the <code class='syntax js'><span class=\"variable\">touches</span></code> set.</p>\n\n<h2>Averaging Touches</h2>\n\n<p>It is often <em>very</em> useful to average the touches. </p>\n\n<p><code class='syntax js'><span class=\"variable\">averagedTouchesForView</span></code> returns an object with four properties:</p>\n\n<ul>\n<li><strong><code class='syntax js'><span class=\"variable\">x</span></code></strong>: The average X position of the touch.</li>\n<li><strong><code class='syntax js'><span class=\"variable\">y</span></code></strong>: The average Y position of the touch.</li>\n<li><strong><code class='syntax js'><span class=\"variable\">d</span></code></strong>: average distance of the all touches from the average x/y position.</li>\n<li><strong><code class='syntax js'><span class=\"variable\">touchCount</span></code></strong> The number of touches averaged.</li>\n</ul>\n\n<p>You can call <code class='syntax js'><span class=\"variable\">averagedTouchesForView</span></code> on two separate objects: an <code class='syntax js'><span class=\"class\">SC</span>.<span class=\"class\">Event</span></code> object,\nor an <code class='syntax js'><span class=\"class\">SC</span>.<span class=\"class\">Touch</span></code> object.</p>\n\n<p>The two work identically but for one important difference: when you call it on <code class='syntax js'><span class=\"class\">SC</span>.<span class=\"class\">Touch</span></code>,\nyou <em>have the option</em> of telling the touch to add itself to the averaged set. Doing so makes no sense\nin most cases: the touch would just be counted twice! But what about <code class='syntax js'><span class=\"variable\">touchStart</span></code>?</p>\n\n<p>Recall that during <code class='syntax js'><span class=\"variable\">touchStart</span></code>, the view does not yet own the touch. So, <code class='syntax js'><span class=\"variable\">averagedTouchesForView</span></code>\nwould not, by default count it.</p>\n\n<pre><code class='syntax js'><span class=\"comment\">// on an event:</span>\n<span class=\"keyword\">var</span> <span class=\"variable\">a</span> = <span class=\"variable\">evt</span>.<span class=\"variable\">averagedTouchesForView</span>(<span class=\"this\">this</span>);\n\n<span class=\"comment\">// on a touch</span>\n<span class=\"keyword\">var</span> <span class=\"variable\">a</span> = <span class=\"variable\">touch</span>.<span class=\"variable\">averagedTouchesForView</span>(<span class=\"this\">this</span>);\n\n<span class=\"comment\">// on a touch, counting the touch itself</span>\n<span class=\"keyword\">var</span> <span class=\"variable\">a</span> = <span class=\"variable\">touch</span>.<span class=\"variable\">averagedTouchesForView</span>(<span class=\"this\">this</span>, <span class=\"class\">YES</span>);\n</code></pre>\n\n<h2>Thinking it Over</h2>\n\n<p>How might you use all of these to produce a good result?</p>\n\n<p>Let's take a simple example: moving and resizing something:</p>\n\n<p><a href='multitouch.js' class='demo'>multitouch.js</a></p>","errors":[],"demos":{"multitouch.js":{"ex":"var Box = SC.View.extend({\n  _scale: 1,\n  _translateX: 0,\n  _translateY: 0,\n  acceptsMultitouch: YES,\n  touchStart: function(touch) {\n    this.recomputeTouchStatus(touch, YES);\n    return YES;\n  },\n  \n  touchesDragged: function(evt, touches) {\n    var t = this._touch;\n    var avg = evt.averagedTouchesForView(this);\n    \n    // translation is easy:\n    this._translateX = t.ourStart.x + avg.x - t.start.x;\n    this._translateY = t.ourStart.y + avg.y - t.start.y;\n    \n    // mathematically speaking, scale *= the end distance / the start distance\n    if (t.start.d > 1) { // but prevent divide-by-0\n      this._scale = t.ourStart.scale * (avg.d / t.start.d);\n    }\n    \n    // reposition\n    this._reposition();\n  },\n  \n  touchEnd: function(touch) {\n    this.recomputeTouchStatus(touch, NO);\n  },\n  \n  /**\n     With this, we recompute our touch status--updating the start positioning and scale.\n  */\n  recomputeTouchStatus: function(touch, considerTouch) {\n    var avg = touch.averagedTouchesForView(this, considerTouch);\n    this._touch = {\n      start: { x: avg.x, y: avg.y,  d: avg.d },\n      ourStart: { x: this._translateX, y: this._translateY, scale: this._scale }\n    };\n  },\n  \n  /**\n    Repositions the view.\n  */\n  _reposition: function() {\n    this.get(\"layer\").style.webkitTransform = \n      \"translate3d(\" + this._translateX + \"px,\" + this._translateY + \"px, 0px) \" +\n      \"scale3d(\" + this._scale + \",\" + this._scale + \",1)\";\n    console.error(this._translateX + \" \" + this._translateY + \" \" + this._scale);\n  },\n  \n  // and now, redirect mouse events :)\n  mouseDown: function(evt) {\n    this.touchStart(evt);\n  },\n  \n  mouseDragged: function(evt) {\n    this.touchesDragged(evt);\n  },\n  \n  mouseUp: function(evt) {\n    this.touchEnd(evt);\n  }\n});\nvar MyExampleView = SC.View.extend({\n  backgroundColor: \"white\",\n  childViews: \"box\".w(),\n  box: Box.design({\n    backgroundColor: \"red\",\n    layout: { left: 10, top: 10, width: 200, height: 200 }\n  })\n});\n\n// bootstrap code :)\nexports.getDemoView = function() {\n  return MyExampleView;\n};\n","highlighted":"<span class=\"keyword\">var</span> <span class=\"class\">Box</span> = <span class=\"class\">SC</span>.<span class=\"class\">View</span>.<span class=\"variable\">extend</span>({\n  <span class=\"variable\">_scale</span>: <span class=\"number integer\">1</span>,\n  <span class=\"variable\">_translateX</span>: <span class=\"number integer\">0</span>,\n  <span class=\"variable\">_translateY</span>: <span class=\"number integer\">0</span>,\n  <span class=\"variable\">acceptsMultitouch</span>: <span class=\"class\">YES</span>,\n  <span class=\"variable\">touchStart</span>: <span class=\"keyword\">function</span>(<span class=\"variable\">touch</span>) {\n    <span class=\"this\">this</span>.<span class=\"variable\">recomputeTouchStatus</span>(<span class=\"variable\">touch</span>, <span class=\"class\">YES</span>);\n    <span class=\"keyword\">return</span> <span class=\"class\">YES</span>;\n  },\n  \n  <span class=\"variable\">touchesDragged</span>: <span class=\"keyword\">function</span>(<span class=\"variable\">evt</span>, <span class=\"variable\">touches</span>) {\n    <span class=\"keyword\">var</span> <span class=\"variable\">t</span> = <span class=\"this\">this</span>.<span class=\"variable\">_touch</span>;\n    <span class=\"keyword\">var</span> <span class=\"variable\">avg</span> = <span class=\"variable\">evt</span>.<span class=\"variable\">averagedTouchesForView</span>(<span class=\"this\">this</span>);\n    \n    <span class=\"comment\">// translation is easy:</span>\n    <span class=\"this\">this</span>.<span class=\"variable\">_translateX</span> = <span class=\"variable\">t</span>.<span class=\"variable\">ourStart</span>.<span class=\"variable\">x</span> + <span class=\"variable\">avg</span>.<span class=\"variable\">x</span> - <span class=\"variable\">t</span>.<span class=\"variable\">start</span>.<span class=\"variable\">x</span>;\n    <span class=\"this\">this</span>.<span class=\"variable\">_translateY</span> = <span class=\"variable\">t</span>.<span class=\"variable\">ourStart</span>.<span class=\"variable\">y</span> + <span class=\"variable\">avg</span>.<span class=\"variable\">y</span> - <span class=\"variable\">t</span>.<span class=\"variable\">start</span>.<span class=\"variable\">y</span>;\n    \n    <span class=\"comment\">// mathematically speaking, scale *= the end distance / the start distance</span>\n    <span class=\"keyword\">if</span> (<span class=\"variable\">t</span>.<span class=\"variable\">start</span>.<span class=\"variable\">d</span> &gt; <span class=\"number integer\">1</span>) { <span class=\"comment\">// but prevent divide-by-0</span>\n      <span class=\"this\">this</span>.<span class=\"variable\">_scale</span> = <span class=\"variable\">t</span>.<span class=\"variable\">ourStart</span>.<span class=\"variable\">scale</span> * (<span class=\"variable\">avg</span>.<span class=\"variable\">d</span> / <span class=\"variable\">t</span>.<span class=\"variable\">start</span>.<span class=\"variable\">d</span>);\n    }\n    \n    <span class=\"comment\">// reposition</span>\n    <span class=\"this\">this</span>.<span class=\"variable\">_reposition</span>();\n  },\n  \n  <span class=\"variable\">touchEnd</span>: <span class=\"keyword\">function</span>(<span class=\"variable\">touch</span>) {\n    <span class=\"this\">this</span>.<span class=\"variable\">recomputeTouchStatus</span>(<span class=\"variable\">touch</span>, <span class=\"class\">NO</span>);\n  },\n  \n  <span class=\"multiline comment\">/**\n     With this, we recompute our touch status--updating the start positioning and scale.\n  */</span>\n  <span class=\"variable\">recomputeTouchStatus</span>: <span class=\"keyword\">function</span>(<span class=\"variable\">touch</span>, <span class=\"variable\">considerTouch</span>) {\n    <span class=\"keyword\">var</span> <span class=\"variable\">avg</span> = <span class=\"variable\">touch</span>.<span class=\"variable\">averagedTouchesForView</span>(<span class=\"this\">this</span>, <span class=\"variable\">considerTouch</span>);\n    <span class=\"this\">this</span>.<span class=\"variable\">_touch</span> = {\n      <span class=\"variable\">start</span>: { <span class=\"variable\">x</span>: <span class=\"variable\">avg</span>.<span class=\"variable\">x</span>, <span class=\"variable\">y</span>: <span class=\"variable\">avg</span>.<span class=\"variable\">y</span>,  <span class=\"variable\">d</span>: <span class=\"variable\">avg</span>.<span class=\"variable\">d</span> },\n      <span class=\"variable\">ourStart</span>: { <span class=\"variable\">x</span>: <span class=\"this\">this</span>.<span class=\"variable\">_translateX</span>, <span class=\"variable\">y</span>: <span class=\"this\">this</span>.<span class=\"variable\">_translateY</span>, <span class=\"variable\">scale</span>: <span class=\"this\">this</span>.<span class=\"variable\">_scale</span> }\n    };\n  },\n  \n  <span class=\"multiline comment\">/**\n    Repositions the view.\n  */</span>\n  <span class=\"variable\">_reposition</span>: <span class=\"keyword\">function</span>() {\n    <span class=\"this\">this</span>.<span class=\"variable\">get</span>(<span class=\"string\">&quot;layer&quot;</span>).<span class=\"variable\">style</span>.<span class=\"variable\">webkitTransform</span> = \n      <span class=\"string\">&quot;translate3d(&quot;</span> + <span class=\"this\">this</span>.<span class=\"variable\">_translateX</span> + <span class=\"string\">&quot;px,&quot;</span> + <span class=\"this\">this</span>.<span class=\"variable\">_translateY</span> + <span class=\"string\">&quot;px, 0px) &quot;</span> +\n      <span class=\"string\">&quot;scale3d(&quot;</span> + <span class=\"this\">this</span>.<span class=\"variable\">_scale</span> + <span class=\"string\">&quot;,&quot;</span> + <span class=\"this\">this</span>.<span class=\"variable\">_scale</span> + <span class=\"string\">&quot;,1)&quot;</span>;\n    <span class=\"variable\">console</span>.<span class=\"variable\">error</span>(<span class=\"this\">this</span>.<span class=\"variable\">_translateX</span> + <span class=\"string\">&quot; &quot;</span> + <span class=\"this\">this</span>.<span class=\"variable\">_translateY</span> + <span class=\"string\">&quot; &quot;</span> + <span class=\"this\">this</span>.<span class=\"variable\">_scale</span>);\n  },\n  \n  <span class=\"comment\">// and now, redirect mouse events :)</span>\n  <span class=\"variable\">mouseDown</span>: <span class=\"keyword\">function</span>(<span class=\"variable\">evt</span>) {\n    <span class=\"this\">this</span>.<span class=\"variable\">touchStart</span>(<span class=\"variable\">evt</span>);\n  },\n  \n  <span class=\"variable\">mouseDragged</span>: <span class=\"keyword\">function</span>(<span class=\"variable\">evt</span>) {\n    <span class=\"this\">this</span>.<span class=\"variable\">touchesDragged</span>(<span class=\"variable\">evt</span>);\n  },\n  \n  <span class=\"variable\">mouseUp</span>: <span class=\"keyword\">function</span>(<span class=\"variable\">evt</span>) {\n    <span class=\"this\">this</span>.<span class=\"variable\">touchEnd</span>(<span class=\"variable\">evt</span>);\n  }\n});\n<span class=\"keyword\">var</span> <span class=\"class\">MyExampleView</span> = <span class=\"class\">SC</span>.<span class=\"class\">View</span>.<span class=\"variable\">extend</span>({\n  <span class=\"variable\">backgroundColor</span>: <span class=\"string\">&quot;white&quot;</span>,\n  <span class=\"variable\">childViews</span>: <span class=\"string\">&quot;box&quot;</span>.<span class=\"variable\">w</span>(),\n  <span class=\"variable\">box</span>: <span class=\"class\">Box</span>.<span class=\"variable\">design</span>({\n    <span class=\"variable\">backgroundColor</span>: <span class=\"string\">&quot;red&quot;</span>,\n    <span class=\"variable\">layout</span>: { <span class=\"variable\">left</span>: <span class=\"number integer\">10</span>, <span class=\"variable\">top</span>: <span class=\"number integer\">10</span>, <span class=\"variable\">width</span>: <span class=\"number integer\">200</span>, <span class=\"variable\">height</span>: <span class=\"number integer\">200</span> }\n  })\n});\n\n<span class=\"comment\">// bootstrap code :)</span>\n<span class=\"variable\">exports</span>.<span class=\"variable\">getDemoView</span> = <span class=\"keyword\">function</span>() {\n  <span class=\"keyword\">return</span> <span class=\"class\">MyExampleView</span>;\n};\n","original":"var Box = SC.View.extend({\n  _scale: 1,\n  _translateX: 0,\n  _translateY: 0,\n  acceptsMultitouch: YES,\n  touchStart: function(touch) {\n    this.recomputeTouchStatus(touch, YES);\n    return YES;\n  },\n  \n  touchesDragged: function(evt, touches) {\n    var t = this._touch;\n    var avg = evt.averagedTouchesForView(this);\n    \n    // translation is easy:\n    this._translateX = t.ourStart.x + avg.x - t.start.x;\n    this._translateY = t.ourStart.y + avg.y - t.start.y;\n    \n    // mathematically speaking, scale *= the end distance / the start distance\n    if (t.start.d > 1) { // but prevent divide-by-0\n      this._scale = t.ourStart.scale * (avg.d / t.start.d);\n    }\n    \n    // reposition\n    this._reposition();\n  },\n  \n  touchEnd: function(touch) {\n    this.recomputeTouchStatus(touch, NO);\n  },\n  \n  /**\n     With this, we recompute our touch status--updating the start positioning and scale.\n  */\n  recomputeTouchStatus: function(touch, considerTouch) {\n    var avg = touch.averagedTouchesForView(this, considerTouch);\n    this._touch = {\n      start: { x: avg.x, y: avg.y,  d: avg.d },\n      ourStart: { x: this._translateX, y: this._translateY, scale: this._scale }\n    };\n  },\n  \n  /**\n    Repositions the view.\n  */\n  _reposition: function() {\n    this.get(\"layer\").style.webkitTransform = \n      \"translate3d(\" + this._translateX + \"px,\" + this._translateY + \"px, 0px) \" +\n      \"scale3d(\" + this._scale + \",\" + this._scale + \",1)\";\n    console.error(this._translateX + \" \" + this._translateY + \" \" + this._scale);\n  },\n  \n  // and now, redirect mouse events :)\n  mouseDown: function(evt) {\n    this.touchStart(evt);\n  },\n  \n  mouseDragged: function(evt) {\n    this.touchesDragged(evt);\n  },\n  \n  mouseUp: function(evt) {\n    this.touchEnd(evt);\n  }\n});\nvar MyExampleView = SC.View.extend({\n  backgroundColor: \"white\",\n  childViews: \"box\".w(),\n  box: Box.design({\n    backgroundColor: \"red\",\n    layout: { left: 10, top: 10, width: 200, height: 200 }\n  })\n});\n\n// bootstrap code :)\nexports.getDemoView = function() {\n  return MyExampleView;\n};\n"}},"articleDirectory":"articles/touch/","outputDirectory":"build/","title":"Multitouch"}